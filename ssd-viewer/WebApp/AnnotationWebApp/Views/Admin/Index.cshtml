@model AnnotationWebApp.Models.LabelTool.AnnotationUserViewModel
@using AnnotationWebApp.Models.LabelTool
@using AnnotationWebApp.Helpers
@{
    ViewData["Title"] = "Admin Page";
}

<div class="position-relative" style="min-height: 120vh; background:grey;">
    <div class="container-fluid p-5" >
        <a href="/Account/Logout" class="btn btn-secondary" type="submit"> 로그아웃 </a>
        <!-- Start Row -->
        <div class="row mx-auto p-5 pt-3 border-1 rounded-3 bg-dark" style="max-width: 1800px;">
            <!-- Start Video List -->
            <div class="col-12 col-lg-6 col-xl-2" >
                <div class="pt-3" >
                    <!-- Title -->
                    <div class="pb-2 text-center">
                        <span class="small text-secondary">Video List</span>
                    </div>
                    <!-- End Title -->
                    <!-- Start List -->
                    <div class="list-group border rounded-3 border-secondary overflow-auto text-secondary" style="height: 768px;" data-role="list">
                        @foreach(var item in Model.VideoList)
                    {
                        <a href="/Admin/Index?videoId=@item.VideoId" class="border-start-0 border-end-0 list-group-item list-group-item-action bg @CssHelper.IsSelected(item.IsSelected)">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">@item.VideoDisplayName</h6>
                                <span class="badge bg-primary rounded-pill">@item.NumOfRemainFrame / @item.NumOfTotalFrame</span>
                            </div>
                            <small>And some small print.</small>
                        </a>
                    }
                    </div>
                    <!-- End List -->
                </div>
            </div>
            <!-- End Video List -->

            <!-- Start Image List -->
            <div class="col-12 col-lg-6 col-xl-2" >
                <div class="pt-3" >
                    <!-- Title -->
                    <div class="pb-2 text-center">
                        <span class="small text-secondary">Image List</span>
                    </div>
                    <!-- End Title -->
                    <!-- Start List -->
                    <div class="list-group border rounded-3 border-secondary overflow-auto border-1 outline-secondary" style="height: 768px;" data-role="list">
                    @foreach(var item in Model.ImageList)
                    {
                        <a href="/Admin/Index?videoId=@item.VideoId&imageId=@item.ImageId" class="border-start-0 border-end-0 list-group-item list-group-item-action bg @CssHelper.IsSelected(item.IsSelected)" >
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">@item.ImageDisplayName</h6>
                            </div>
                            <small>And some small print.</small>
                        </a>
                    }
                    </div>
                    <!-- End List -->
                </div>
            </div>
            <!-- End Image List -->

            <!-- Start Editor -->
            <div class="col-12 col-xl-8">
                <div class="d-flex ps-2 pt-5">
                    <!-- Start Canvas -->
                    <div class="rounded-3 mb-3 position-relative outline-secondary bg-light" style="width: 1024px; height: 768px;">
                        <img src="/api/DataSet/Image/@Model.WorkImageId" width="1024" height="768" class="mb-2" id="uploadedImage" onerror="this.onerror=null;this.src='/images/noimage.png';" />
                        <canvas class="position-absolute rounded-3" id="rectCanvas" style="z-index:1; left:0; top:0; cursor: crosshair;"></canvas>
                    </div>
                    <!-- End Canvas -->

                    <!-- Start Tools -->
                    <div class="d-flex flex-column ps-2">
                        <!-- Start REMOVABLE AREA -->
                          <div class="mb-1 btn btn-outline-secondary" id="uploadBox">
                            <label for="uploadImage" class="" style="cursor: pointer;" title="Upload Image">
                                <i class="bi bi-card-image"></i>
                            </label>
                            <input class="d-none" type="file" name="uploadImage" accept="image/*" id="uploadImage">
                        </div>
                        
                        <div class="mb-1 d-none btn btn-outline-secondary" id="resetBox">
                            <label for="resetImage" class="" style="cursor: pointer;" title="New">
                                <i class="bi bi-plus"></i>
                            </label>
                            <input class="d-none" type="button" name="resetImage" id="resetImage">
                        </div>
                        <!-- End REMOVABLE AREA -->
        
                        <div class="d-flex flex-column">
                            <button type="button" id="resetDrawing" class="mb-1 btn btn-outline-secondary" title="Erase Stroke">
                                <i class="bi bi-eraser"></i>
                            </button>
                            
                            <button type="button" id="undoDrawing" class="mb-1 btn btn-outline-secondary" title="Undo">
                                <i class="bi bi-arrow-counterclockwise"></i>
                            </button>
        
                            <button type="button" id="redoDrawing" class="mb-1 btn btn-outline-secondary" title="Redo">
                                <i class="bi bi-arrow-clockwise"></i>
                            </button>
        
                            <input type="color" id="strokeColor" class="mb-1 btn btn-outline-secondary" title="Stroke Color" style="width: 2.8rem;" />
        
                            <button type="button" id="lineWidth_thin" class="mb-1 btn btn-outline-secondary" title="Line Thickness">
                                <i class="bi bi-chevron-bar-contract"></i>
                            </button>
        
                            <button type="button" id="lineWidth_thick" class="mb-1 btn btn-outline-secondary" title="Line Thickness">
                                <i class="bi bi-chevron-bar-expand"></i>
                            </button>

                            <form asp-action="UpdateTumorPosition" method="post" id="send">
                                 @Html.AntiForgeryToken()
                                    <input type="hidden" id="imageId" name="imageId" value="@Model.WorkImageId"/>
                                    <input type="hidden" id="tumorPosition" name="tumorPosition" value="@Model.PositionJsonStr"/>
                                   <button type="submit" class="mb-1 btn btn-outline-secondary w-100" title="Send">
                                    <i class="bi bi-send"></i>
                                </button>
                            </form>

                            
                        </div>
                    </div>
                    <!-- End Tools -->
                </div>
            </div>
            <!-- End Editor -->
        </div>
        <!-- End Row -->
    </div>
     <!-- end container -->


       <footer class="border-top border-secondary footer text-white text-center justify-content-center" style="min-height: 15vh; background:grey;">
        <div class="container-fluid">
            <div class="row mx-auto text-center justify-content-center mt-5" style="max-width: 1424px;">
                &copy;2022 Storage Solution for Doctors co,.ltd
            </div>
        </div>
    </footer>
</div>


@section Scripts{
    <script src="~/js/index.js" asp-append-version="true"></script>

    <script>
        const lists = document.querySelectorAll('[data-role="list"]');
        lists.forEach( list => {
            const btns = list.querySelectorAll('button.list-group-item');
            btns.forEach( btn => {
                btn.addEventListener('click', e => {
                    e.preventDefault();
                    btns.forEach( btn => btn.classList.remove('active'));
                    btn.classList.add('active');

                })
            })
        })

    </script>


    <script>
        const tumorPosition = document.querySelector('#tumorPosition');
        const values = JSON.parse(tumorPosition.value);

        paint.resetDrawing();

        for(let i=0; i<values.length; i++){
            const value = values[i];
            const startPos = {x: Number(value.startX), y: Number(value.startY)};
            paint.setStartPos(startPos);
            paint.drawRects(Number(value.endX), Number(value.endY));
            paint.saveRect();

        }
    </script>

}